from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from services.storage import Storage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.states import AddItemState, EditItemState, CategoryState
import os
from functools import wraps

storage = Storage()

ALLOWED_USERS = [339120628, 648866532]

def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in ALLOWED_USERS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

@admin_only
async def admin_panel_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_item - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/delete_item - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/edit_item - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/view_items - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"
        "/rename_category - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "/delete_category - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )

@admin_only
async def add_item_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddItemState.waiting_for_category)

@admin_only
async def delete_item_handler(message: types.Message, state: FSMContext):
    categories = storage.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f"delete_item_category_{category}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard.as_markup())
    await state.set_state(AddItemState.waiting_for_delete_category)

@admin_only
async def delete_item_category_handler(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("delete_item_category_", "")
    items = storage.get_items_by_category(category)
    
    if not items:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    keyboard = InlineKeyboardBuilder()
    for item in items:
        keyboard.add(types.InlineKeyboardButton(text=item["name"], callback_data=f"delete_item_{category}_{item['id']}"))

    await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}'):", reply_markup=keyboard.as_markup())
    await state.update_data(category=category)
    await state.set_state(AddItemState.waiting_for_delete_item)

@admin_only
async def delete_item_confirm_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.replace("delete_item_", "").split("_")
    if len(data) != 2:
        await callback_query.message.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    category, item_id = data
    item_id = int(item_id)
    success = storage.delete_item(category, item_id)

    if success:
        await callback_query.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {item_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.")
    await state.clear()

@admin_only
async def item_category_handler(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddItemState.waiting_for_name)

@admin_only
async def item_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddItemState.waiting_for_price)

@admin_only
async def item_price_handler(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddItemState.waiting_for_quantity)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")

@admin_only
async def item_quantity_handler(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        await state.update_data(quantity=quantity)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddItemState.waiting_for_description)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")

@admin_only
async def item_description_handler(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ç–æ).")
    await state.set_state(AddItemState.waiting_for_image)

@admin_only
async def item_image_handler(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
        return

    data = await state.get_data()
    category = data["category"]
    name = data["name"]
    price = data["price"]
    quantity = data["quantity"]
    description = data["description"]

    bot = message.bot

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path

    image_filename = f"{name.replace(' ', '_')}.jpg"
    local_path = os.path.join(storage.image_folder, image_filename)
    await bot.download_file(file_path, local_path)

    storage.add_item(category, name, price, quantity, description, local_path)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")
    await state.clear()

@admin_only
async def view_items_handler(message: types.Message):
    items = storage.get_all_items()
    if items:
        response = "\n".join(
            [f"ID: {item['id']} | {item['name']} ‚Äî {item['price']} USD\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}" for item in items]
        )
    else:
        response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç."
    await message.answer(response)

@admin_only
async def edit_item_handler(message: types.Message, state: FSMContext):
    categories = storage.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f"edit_category_{category}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard.as_markup())
    await state.set_state(EditItemState.waiting_for_category)

@admin_only
async def edit_item_category_handler(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("edit_category_", "")
    items = storage.get_items_by_category(category)
    
    if not items:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    response = f"–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}'):\n\n"
    for item in items:
        response += f"üÜî {item['id']} | {item['name']} | {item['price']} USD | {item['quantity']} —à—Ç.\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"

    await callback_query.message.answer(response)
    await state.update_data(category=category)
    await state.set_state(EditItemState.waiting_for_item_id)

@admin_only
async def edit_item_id_handler(message: types.Message, state: FSMContext):
    try:
        item_id = int(message.text)
        data = await state.get_data()
        category = data["category"]
        item = storage.get_item(category, item_id)

        if item:
            await state.update_data(item_id=item_id)
            keyboard = InlineKeyboardBuilder()
            keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"))
            keyboard.add(types.InlineKeyboardButton(text="–¶–µ–Ω—É", callback_data="edit_price"))
            keyboard.add(types.InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_quantity"))
            keyboard.add(types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"))
            keyboard.add(types.InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image"))
            keyboard.adjust(2)

            await message.answer(
                f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä:\n"
                f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {item['price']} USD\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard.as_markup()
            )
            await state.set_state(EditItemState.waiting_for_property_choice)
        else:
            await message.answer("–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

@admin_only
async def edit_item_property_choice_handler(callback_query: types.CallbackQuery, state: FSMContext):
    property_choice = callback_query.data.replace("edit_", "")
    await state.update_data(property_choice=property_choice)
    if property_choice == "image":
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        await state.set_state(EditItemState.waiting_for_new_image)
    else:
        await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {property_choice}.")
        await state.set_state(EditItemState.waiting_for_new_value)

@admin_only
async def edit_item_save_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    item_id = data["item_id"]
    property_choice = data["property_choice"]

    try:
        if property_choice == "price":
            new_value = float(message.text)
        elif property_choice == "quantity":
            new_value = int(message.text)
        else:
            new_value = message.text.strip()

        success = storage.edit_item_property(category, item_id, property_choice, new_value)
        if success:
            await message.answer(f"‚úÖ {property_choice.capitalize()} —Ç–æ–≤–∞—Ä–∞ —Å ID {item_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {property_choice} —Ç–æ–≤–∞—Ä–∞.")
    except ValueError:
        await message.answer(f"–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {property_choice}.")
    finally:
        await state.clear()

@admin_only
async def edit_item_image_handler(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
        return

    data = await state.get_data()
    category = data["category"]
    item_id = data["item_id"]
    item = storage.get_item(category, item_id)

    bot = message.bot

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path

    image_filename = f"{item['name'].replace(' ', '_')}.jpg"
    local_path = os.path.join(storage.image_folder, image_filename)
    await bot.download_file(file_path, local_path)

    success = storage.edit_item_image(category, item_id, local_path)
    if success:
        await message.answer(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å ID {item_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.clear()

@admin_only
async def rename_category_handler(message: types.Message, state: FSMContext):
    categories = storage.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f"rename_category_{category}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard.as_markup())
    await state.set_state(CategoryState.waiting_for_rename_category)

@admin_only
async def rename_category_confirm_handler(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("rename_category_", "")
    await state.update_data(old_category=category)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
    await state.set_state(CategoryState.waiting_for_new_category_name)

@admin_only
async def rename_category_save_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    old_category = data["old_category"]
    new_category = message.text.strip()

    success = storage.rename_category(old_category, new_category)
    if success:
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{old_category}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_category}'!")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{old_category}'.")
    await state.clear()

@admin_only
async def delete_category_handler(message: types.Message, state: FSMContext):
    categories = storage.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f"delete_category_{category}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
    await state.set_state(CategoryState.waiting_for_delete_category)

@admin_only
async def delete_category_confirm_handler(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("delete_category_", "")
    await state.update_data(category=category)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º", callback_data="delete_with_content"))
    keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="transfer_items"))
    
    await callback_query.message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' —Å–æ –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é?",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(CategoryState.waiting_for_delete_or_transfer)

@admin_only
async def delete_category_action_handler(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    data = await state.get_data()
    category = data["category"]
    
    if action == "delete_with_content":
        success = storage.delete_category(category)
        if success:
            await callback_query.message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∏ –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        else:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")
        await state.clear()
    elif action == "transfer_items":
        categories = storage.get_categories()
        categories.remove(category)  # Remove the category being deleted from the list
        
        keyboard = InlineKeyboardBuilder()
        for cat in categories:
            keyboard.add(types.InlineKeyboardButton(text=cat, callback_data=f"transfer_to_{cat}"))
        
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard.as_markup())
        await state.set_state(CategoryState.waiting_for_transfer_category)

@admin_only
async def delete_category_save_handler(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    transfer_to_category = callback_query.data.replace("transfer_to_", "")
    
    success = storage.delete_category(category, transfer_to_category=transfer_to_category)
    if success:
        await callback_query.message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞, –∞ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{transfer_to_category}'!")
    else:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{transfer_to_category}'.")
    await state.clear()

def register_handlers_admin(dp: Dispatcher):
    dp.message.register(admin_panel_handler, Command("admin_panel"))
    dp.message.register(add_item_handler, Command("add_item"))
    dp.message.register(delete_item_handler, Command("delete_item"))
    dp.callback_query.register(delete_item_category_handler, lambda cb: cb.data.startswith("delete_item_category_"))
    dp.callback_query.register(delete_item_confirm_handler, lambda cb: cb.data.startswith("delete_item_"))
    dp.message.register(item_category_handler, StateFilter(AddItemState.waiting_for_category))
    dp.message.register(item_name_handler, StateFilter(AddItemState.waiting_for_name))
    dp.message.register(item_price_handler, StateFilter(AddItemState.waiting_for_price))
    dp.message.register(item_description_handler, StateFilter(AddItemState.waiting_for_description))
    dp.message.register(item_quantity_handler, StateFilter(AddItemState.waiting_for_quantity))
    dp.message.register(item_image_handler, StateFilter(AddItemState.waiting_for_image))
    dp.message.register(view_items_handler, Command("view_items"))
    dp.message.register(edit_item_handler, Command("edit_item"))
    dp.callback_query.register(edit_item_category_handler, lambda cb: cb.data.startswith("edit_category_"))
    dp.message.register(edit_item_id_handler, StateFilter(EditItemState.waiting_for_item_id))
    dp.callback_query.register(edit_item_property_choice_handler, StateFilter(EditItemState.waiting_for_property_choice))
    dp.message.register(edit_item_save_handler, StateFilter(EditItemState.waiting_for_new_value))
    dp.message.register(edit_item_image_handler, StateFilter(EditItemState.waiting_for_new_image))
    dp.message.register(rename_category_handler, Command("rename_category"))
    dp.callback_query.register(rename_category_confirm_handler, lambda cb: cb.data.startswith("rename_category_"))
    dp.message.register(rename_category_save_handler, StateFilter(CategoryState.waiting_for_new_category_name))
    dp.message.register(delete_category_handler, Command("delete_category"))
    dp.callback_query.register(delete_category_confirm_handler, lambda cb: cb.data.startswith("delete_category_"))
    dp.callback_query.register(delete_category_action_handler, StateFilter(CategoryState.waiting_for_delete_or_transfer))
    dp.callback_query.register(delete_category_save_handler, StateFilter(CategoryState.waiting_for_transfer_category))
