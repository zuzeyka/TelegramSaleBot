from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from services.storage import products
import os

async def admin_panel_handler(message: types.Message):
    if message.from_user.id == int(os.getenv("ADMIN_ID")):
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
            [InlineKeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="show_products")]
        ])
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

async def add_product_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
async def show_products_handler(callback_query: types.CallbackQuery):
    if products:
        response = "\n".join(
            [f"üì¶ {name} ‚Äî {details['price']} USD\n{details['description']}" for name, details in products.items()]
        )
    else:
        response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç."
    await callback_query.message.answer(response)

def register_handlers_admin(dp: Dispatcher):
    dp.message.register(admin_panel_handler, Command("admin_panel"))
    dp.callback_query.register(add_product_handler, lambda c: c.data == "add_product")
    dp.callback_query.register(show_products_handler, lambda c: c.data == "show_products")
