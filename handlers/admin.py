from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from services.storage import Storage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.states import AddItemState, EditItemState

storage = Storage()

async def admin_panel_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_item - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/edit_item - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/view_items - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"
    )

async def add_item_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddItemState.waiting_for_category)

async def item_category_handler(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddItemState.waiting_for_name)

async def item_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddItemState.waiting_for_price)

async def item_price_handler(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddItemState.waiting_for_quantity)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")

async def item_quantity_handler(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        await state.update_data(quantity=quantity)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddItemState.waiting_for_description)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")

async def item_description_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    name = data["name"]
    price = data["price"]
    quantity = data["quantity"]
    description = message.text

    storage.add_item(category, name, price, quantity, description)
    await message.answer(f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")
    await state.clear()


async def view_items_handler(message: types.Message):
    items = storage.get_all_items()
    if items:
        response = "\n".join(
            [f"ID: {item['id']} | {item['name']} ‚Äî {item['price']} USD\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}" for item in items]
        )
    else:
        response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç."
    await message.answer(response)

async def edit_item_handler(message: types.Message, state: FSMContext):
    categories = storage.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f"edit_category_{category}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard.as_markup())
    await state.set_state(EditItemState.waiting_for_category)

async def edit_item_category_handler(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("edit_category_", "")
    items = storage.get_items_by_category(category)
    
    if not items:
        await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    response = f"–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}'):\n\n"
    for item in items:
        response += f"üÜî {item['id']} | {item['name']} | {item['price']} USD | {item['quantity']} —à—Ç.\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"

    await callback_query.message.answer(response)
    await state.update_data(category=category)
    await state.set_state(EditItemState.waiting_for_item_id)

async def edit_item_id_handler(message: types.Message, state: FSMContext):
    try:
        item_id = int(message.text)
        data = await state.get_data()
        category = data["category"]
        item = storage.get_item(category, item_id)

        if item:
            await state.update_data(item_id=item_id)
            await message.answer(
                f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä:\n"
                f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {item['price']} USD\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"`–ù–∞–∑–≤–∞–Ω–∏–µ;–¶–µ–Ω–∞;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ;–û–ø–∏—Å–∞–Ω–∏–µ`", parse_mode="Markdown"
            )
            await state.set_state(EditItemState.waiting_for_new_data)
        else:
            await message.answer("–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

async def edit_item_save_handler(message: types.Message, state: FSMContext):
    try:
        name, price, quantity, description = map(str.strip, message.text.split(";"))
        price = float(price)
        quantity = int(quantity)

        data = await state.get_data()
        category = data["category"]
        item_id = data["item_id"]

        success = storage.edit_item(category, item_id, name, price, quantity, description)
        if success:
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {item_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            await message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ;–¶–µ–Ω–∞;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ;–û–ø–∏—Å–∞–Ω–∏–µ`.")
    finally:
        await state.clear()

def register_handlers_admin(dp: Dispatcher):
    dp.message.register(admin_panel_handler, Command("admin_panel"))
    dp.message.register(add_item_handler, Command("add_item"))
    dp.message.register(item_category_handler, StateFilter(AddItemState.waiting_for_category))
    dp.message.register(item_name_handler, StateFilter(AddItemState.waiting_for_name))
    dp.message.register(item_price_handler, StateFilter(AddItemState.waiting_for_price))
    dp.message.register(item_description_handler, StateFilter(AddItemState.waiting_for_description))
    dp.message.register(item_quantity_handler, StateFilter(AddItemState.waiting_for_quantity))
    dp.message.register(view_items_handler, Command("view_items"))
    dp.message.register(edit_item_handler, Command("edit_item"))
    dp.callback_query.register(edit_item_category_handler, lambda cb: cb.data.startswith("edit_category_"))
    dp.message.register(edit_item_id_handler, StateFilter(EditItemState.waiting_for_item_id))
    dp.message.register(edit_item_save_handler, StateFilter(EditItemState.waiting_for_new_data))
