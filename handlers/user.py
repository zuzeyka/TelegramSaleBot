from aiogram import Dispatcher, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import FSInputFile  
from aiogram.filters import Command
from services.storage import Storage

storage = Storage()

def register_handlers_user(dp: Dispatcher):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìñ –í—Å–µ —Ç–æ–≤–∞—Ä—ã"))
    builder.add(types.KeyboardButton(text="üìù –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"))
    builder.add(types.KeyboardButton(text="üí° –û –º–∞–≥–∞–∑–∏–Ω–µ"))
    builder.add(types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    builder.add(types.KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"))
    builder.add(types.KeyboardButton(text="‚ù§Ô∏è –ü–æ–º–æ—â—å"))
    builder.adjust(2)
    keyboard = builder.as_markup(resize_keyboard=True)

    async def start_handler(message: types.Message):
        await message.answer(f"Hello, {message.from_user.full_name}!", reply_markup=keyboard)

    async def profile_handler(message: types.Message):
        user_id = message.from_user.id
        await message.answer(f"–í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")

    async def availability_handler(message: types.Message):
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    
    async def about_handler(message: types.Message):
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞. –°–æ–∑–¥–∞–Ω @zuzeyka")

    async def help_handler(message: types.Message):
        await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @JacobHarrison")

    async def rules_handler(message: types.Message):
        await message.answer(f"1. –ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n2. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–µ—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.\n3. –í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 15 —Å—É—Ç–æ–∫.\n4. –ó–∞ —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —Ç. –ø. –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞.\n5. –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ª–∏–º–∏—Ç –ø–æ –ª–∞–π–∫–∞–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –≤ –Ω–∞—á–∞–ª–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n6. –ö–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∫–∞–∑–∞–Ω–∞ –ø–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ.")

    async def show_categories_handler(message: types.Message):
        categories = storage.get_categories()
        if not categories:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        keyboard = InlineKeyboardBuilder()
        for category in categories:
            keyboard.add(types.InlineKeyboardButton(text=category, callback_data=f"category_{category}"))

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard.as_markup())

    async def show_items_in_category_handler(callback_query: types.CallbackQuery):
        category = callback_query.data.replace("category_", "")
        items = storage.get_items_by_category(category)

        if not items:
            await callback_query.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        keyboard = InlineKeyboardBuilder()
        for item in items:
            keyboard.add(types.InlineKeyboardButton(text=item["name"], callback_data=f"item_{category}_{item['id']}"))

        keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))

        if callback_query.message.text:
            await callback_query.message.edit_text(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=keyboard.as_markup())
        else:
            await callback_query.message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=keyboard.as_markup())

    async def show_items_handler(callback_query: types.CallbackQuery):
        _, category, item_id = callback_query.data.split("_")
        item_id = int(item_id)
        item = storage.get_item(category, item_id)

        if not item:
            await callback_query.message.answer("–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        keyboard = InlineKeyboardBuilder()
        keyboard.add(types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{category}_{item_id}"))
        keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_category_{category}"))

        photo = FSInputFile(item["image_path"])

        await callback_query.message.answer_photo(
            photo=photo,
            caption=f"üîπ {item['name']}\nüí∞ –¶–µ–Ω–∞: {item['price']} USD\nüì¶ –û—Å—Ç–∞—Ç–æ–∫: {item['quantity']} —à—Ç.\nüìù {item['description']}",
            reply_markup=keyboard.as_markup()
        )

    async def back_to_categories_handler(callback_query: types.CallbackQuery):
        await show_categories_handler(callback_query.message)

    async def back_to_category_handler(callback_query: types.CallbackQuery):
        category = callback_query.data.replace("back_to_category_", "")
        new_callback_query = types.CallbackQuery(
            id=callback_query.id,
            from_user=callback_query.from_user,
            message=callback_query.message,
            chat_instance=callback_query.chat_instance,
            data=f"category_{category}"
        )
        await show_items_in_category_handler(new_callback_query)

    async def buy_item_handler(callback_query: types.CallbackQuery):
        _, category, item_id = callback_query.data.split("_")
        item_id = int(item_id)
        item = storage.get_item(category, item_id)

        if not item:
            await callback_query.message.answer("–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Implement the buying logic here
        await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä '{item['name']}' –∑–∞ {item['price']} USD.")

    dp.message.register(start_handler, Command("start"))
    dp.callback_query.register(show_items_in_category_handler, lambda cb: cb.data.startswith("category_"))
    dp.callback_query.register(show_items_handler, lambda cb: cb.data.startswith("item_"))
    dp.callback_query.register(back_to_categories_handler, lambda cb: cb.data == "back_to_categories")
    dp.callback_query.register(back_to_category_handler, lambda cb: cb.data.startswith("back_to_category_"))
    dp.callback_query.register(buy_item_handler, lambda cb: cb.data.startswith("buy_"))
    dp.message.register(show_categories_handler, lambda msg: msg.text == "üìñ –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
    dp.message.register(availability_handler, lambda msg: msg.text == "üìù –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
    dp.message.register(about_handler, lambda msg: msg.text == "üí° –û –º–∞–≥–∞–∑–∏–Ω–µ")
    dp.message.register(profile_handler, lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    dp.message.register(rules_handler, lambda msg: msg.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
    dp.message.register(help_handler, lambda msg: msg.text == "‚ù§Ô∏è –ü–æ–º–æ—â—å")